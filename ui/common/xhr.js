import { defined } from './common';
const jsonHeader = {
    Accept: 'application/vnd.chest.v1+json'
};
export const defaultInit = {
    cache: 'no-cache',
    credentials: 'same-origin'
};
export const xhrHeader = {
    'X-Requested-With': 'XMLHttpRequest'
};
export const json = (url, init = {}) => fetch(url, Object.assign(Object.assign(Object.assign({}, defaultInit), { headers: Object.assign(Object.assign({}, jsonHeader), xhrHeader) }), init)).then(res => {
    if (res.ok)
        return res.json();
    throw res.json().then(_ => {
        if (_.redirect) {
            chest.redirect(_.redirect);
        }
        return _;
    });
});
export const form = (data) => {
    const formData = new FormData();
    for (const k of Object.keys(data))
        formData.append(k, data[k]);
    return formData;
};
export const url = (path, params) => {
    const searchParams = new URLSearchParams();
    for (const k of Object.keys(params))
        if (defined(params[k]))
            searchParams.append(k, params[k]);
    const query = searchParams.toString();
    return query ? `${path}?${query}` : path;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGhyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3hoci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRW5DLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLE1BQU0sRUFBRSwrQkFBK0I7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBZ0I7SUFDdEMsS0FBSyxFQUFFLFVBQVU7SUFDakIsV0FBVyxFQUFFLGFBQWE7Q0FDM0IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixrQkFBa0IsRUFBRSxnQkFBZ0I7Q0FDckMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVcsRUFBRSxPQUFvQixFQUFFLEVBQWdCLEVBQUUsQ0FDeEUsS0FBSyxDQUFDLEdBQUcsZ0RBQ0osV0FBVyxLQUNkLE9BQU8sa0NBQ0YsVUFBVSxHQUNWLFNBQVMsTUFFWCxJQUFJLEVBQ1AsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFDWixJQUFJLEdBQUcsQ0FBQyxFQUFFO1FBQUUsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDOUIsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3hCLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNkLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDWCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBR0wsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBUyxFQUFZLEVBQUU7SUFDMUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUNoQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFBO0FBRUQsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBWSxFQUFFLE1BQThELEVBQUUsRUFBRTtJQUNsRyxNQUFNLFlBQVksR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBQzNDLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFBRSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBRSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFXLENBQUMsQ0FBQztJQUN6RyxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDMUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4vY29tbW9uJztcblxuY29uc3QganNvbkhlYWRlciA9IHtcbiAgQWNjZXB0OiAnYXBwbGljYXRpb24vdm5kLmNoZXN0LnYxK2pzb24nXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdEluaXQ6IFJlcXVlc3RJbml0ID0ge1xuICBjYWNoZTogJ25vLWNhY2hlJyxcbiAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbidcbn07XG5cbmV4cG9ydCBjb25zdCB4aHJIZWFkZXIgPSB7XG4gICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0J1xufTtcblxuZXhwb3J0IGNvbnN0IGpzb24gPSAodXJsOiBzdHJpbmcsIGluaXQ6IFJlcXVlc3RJbml0ID0ge30pOiBQcm9taXNlPGFueT4gPT5cbiAgZmV0Y2godXJsLCB7XG4gICAgLi4uZGVmYXVsdEluaXQsXG4gICAgaGVhZGVyczoge1xuICAgICAgLi4uanNvbkhlYWRlcixcbiAgICAgIC4uLnhockhlYWRlclxuICAgIH0sXG4gICAgLi4uaW5pdFxuICB9KS50aGVuKHJlcyA9PiB7XG4gICAgaWYgKHJlcy5vaykgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgdGhyb3cgcmVzLmpzb24oKS50aGVuKF8gPT4ge1xuICAgICAgaWYgKF8ucmVkaXJlY3QpIHtcbiAgICAgICAgY2hlc3QucmVkaXJlY3QoXy5yZWRpcmVjdCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfSk7XG4gICAgICAgIFxuXG5leHBvcnQgY29uc3QgZm9ybSA9IChkYXRhOiBhbnkpOiBGb3JtRGF0YSA9PiB7XG4gIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhkYXRhKSkgZm9ybURhdGEuYXBwZW5kKGssIGRhdGFba10pO1xuICByZXR1cm4gZm9ybURhdGE7XG59XG5cbmV4cG9ydCBjb25zdCB1cmwgPSAocGF0aDogc3RyaW5nLCBwYXJhbXM6IHsgW2s6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCB1bmRlZmluZWQgfSkgPT4ge1xuICBjb25zdCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhwYXJhbXMpKSBpZiAoZGVmaW5lZChwYXJhbXNba10pKSBzZWFyY2hQYXJhbXMuYXBwZW5kKGssIHBhcmFtc1trXSBhcyBzdHJpbmcpO1xuICBjb25zdCBxdWVyeSA9IHNlYXJjaFBhcmFtcy50b1N0cmluZygpO1xuICByZXR1cm4gcXVlcnkgPyBgJHtwYXRofT8ke3F1ZXJ5fWA6IHBhdGg7ICBcbn07XG4iXX0=