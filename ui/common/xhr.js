import { defined } from './common';
const jsonHeader = {
    Accept: 'application/vnd.chest.v1+json'
};
export const defaultInit = {
    cache: 'no-cache',
    credentials: 'same-origin'
};
export const xhrHeader = {
    'X-Requested-With': 'XMLHttpRequest'
};
export const json = (url, init = {}) => fetch(url, {
    ...defaultInit,
    headers: {
        ...jsonHeader,
        ...xhrHeader
    },
    ...init
}).then(res => {
    if (res.ok)
        return res.json();
    throw res.json().then(_ => {
        if (_.redirect) {
            chest.redirect(_.redirect);
        }
        return _;
    });
});
export const form = (data) => {
    const formData = new FormData();
    for (const k of Object.keys(data))
        formData.append(k, data[k]);
    return formData;
};
export const url = (path, params) => {
    const searchParams = new URLSearchParams();
    for (const k of Object.keys(params))
        if (defined(params[k]))
            searchParams.append(k, params[k]);
    const query = searchParams.toString();
    return query ? `${path}?${query}` : path;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGhyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3JjL3hoci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRW5DLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLE1BQU0sRUFBRSwrQkFBK0I7Q0FDeEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBZ0I7SUFDdEMsS0FBSyxFQUFFLFVBQVU7SUFDakIsV0FBVyxFQUFFLGFBQWE7Q0FDM0IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRztJQUN2QixrQkFBa0IsRUFBRSxnQkFBZ0I7Q0FDckMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQVcsRUFBRSxPQUFvQixFQUFFLEVBQWdCLEVBQUUsQ0FDeEUsS0FBSyxDQUFDLEdBQUcsRUFBRTtJQUNULEdBQUcsV0FBVztJQUNkLE9BQU8sRUFBRTtRQUNQLEdBQUcsVUFBVTtRQUNiLEdBQUcsU0FBUztLQUNiO0lBQ0QsR0FBRyxJQUFJO0NBQ1IsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUNaLElBQUksR0FBRyxDQUFDLEVBQUU7UUFBRSxPQUFPLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QixNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDeEIsSUFBSSxDQUFDLENBQUMsUUFBUSxFQUFFO1lBQ2QsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDNUI7UUFDRCxPQUFPLENBQUMsQ0FBQztJQUNYLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFHTCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFTLEVBQVksRUFBRTtJQUMxQyxNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLEtBQUssTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUE7QUFFRCxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFZLEVBQUUsTUFBOEQsRUFBRSxFQUFFO0lBQ2xHLE1BQU0sWUFBWSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7SUFDM0MsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUFFLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQVcsQ0FBQyxDQUFDO0lBQ3pHLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN0QyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksS0FBSyxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUMxQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi9jb21tb24nO1xuXG5jb25zdCBqc29uSGVhZGVyID0ge1xuICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi92bmQuY2hlc3QudjEranNvbidcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0SW5pdDogUmVxdWVzdEluaXQgPSB7XG4gIGNhY2hlOiAnbm8tY2FjaGUnLFxuICBjcmVkZW50aWFsczogJ3NhbWUtb3JpZ2luJ1xufTtcblxuZXhwb3J0IGNvbnN0IHhockhlYWRlciA9IHtcbiAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnXG59O1xuXG5leHBvcnQgY29uc3QganNvbiA9ICh1cmw6IHN0cmluZywgaW5pdDogUmVxdWVzdEluaXQgPSB7fSk6IFByb21pc2U8YW55PiA9PlxuICBmZXRjaCh1cmwsIHtcbiAgICAuLi5kZWZhdWx0SW5pdCxcbiAgICBoZWFkZXJzOiB7XG4gICAgICAuLi5qc29uSGVhZGVyLFxuICAgICAgLi4ueGhySGVhZGVyXG4gICAgfSxcbiAgICAuLi5pbml0XG4gIH0pLnRoZW4ocmVzID0+IHtcbiAgICBpZiAocmVzLm9rKSByZXR1cm4gcmVzLmpzb24oKTtcbiAgICB0aHJvdyByZXMuanNvbigpLnRoZW4oXyA9PiB7XG4gICAgICBpZiAoXy5yZWRpcmVjdCkge1xuICAgICAgICBjaGVzdC5yZWRpcmVjdChfLnJlZGlyZWN0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9KTtcbiAgICAgICAgXG5cbmV4cG9ydCBjb25zdCBmb3JtID0gKGRhdGE6IGFueSk6IEZvcm1EYXRhID0+IHtcbiAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKGRhdGEpKSBmb3JtRGF0YS5hcHBlbmQoaywgZGF0YVtrXSk7XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuZXhwb3J0IGNvbnN0IHVybCA9IChwYXRoOiBzdHJpbmcsIHBhcmFtczogeyBbazogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHVuZGVmaW5lZCB9KSA9PiB7XG4gIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKHBhcmFtcykpIGlmIChkZWZpbmVkKHBhcmFtc1trXSkpIHNlYXJjaFBhcmFtcy5hcHBlbmQoaywgcGFyYW1zW2tdIGFzIHN0cmluZyk7XG4gIGNvbnN0IHF1ZXJ5ID0gc2VhcmNoUGFyYW1zLnRvU3RyaW5nKCk7XG4gIHJldHVybiBxdWVyeSA/IGAke3BhdGh9PyR7cXVlcnl9YDogcGF0aDsgIFxufTtcbiJdfQ==